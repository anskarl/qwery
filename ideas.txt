DESIGN NOTES / IDEAS

************************************************************************
*       Fixed-length Format testing
************************************************************************

SELECT
    WIDTH(Symbol, 10) AS Symbol,
    WIDTH(Name, 64) AS Name,
    WIDTH(Sector, 30) AS Sector,
    WIDTH(Industry, 30) AS Industry,
    WIDTH(`Summary Quote`, 128) AS `Summary Quote`
FROM 'companylist.csv'
WHERE Industry = 'Oil/Gas Transmission'

Comments: This works for writing fixed-length fields, but what about reading?

SELECT Symbol, Name, Sector, Industry, `Summary Quote`
FROM 'companylist.csv'
WHERE Industry = 'Oil/Gas Transmission'
WITH FIXED COLUMNS (
    Symbol WIDTH 10,
    Name WIDTH 64,
    Sector WIDTH 30,
    Industry WIDTH 30,
    `Summary Quote` WIDTH 128
)

INSERT INTO 'fixed-data.txt' (Symbol, Name, Sector, Industry)
WITH FIXED COLUMNS (
    Symbol WIDTH 8,
    Name WIDTH 32,
    Sector WIDTH 20,
    Industry WIDTH 20
)
SELECT Symbol, Name, Sector, Industry, `Summary Quote`
FROM 'companylist.csv'
WITH FIXED COLUMNS (
    Symbol WIDTH 10,
    Name WIDTH 64,
    Sector WIDTH 30,
    Industry WIDTH 30,
    `Summary Quote` WIDTH 128
)
WHERE Industry = 'Oil/Gas Transmission'

************************************************************************
*       Data Resource testing
************************************************************************

SELECT visitorId, adGroup, program, pageLabel, categoryId, referrerDomain
FROM "kafka://dev001:9093?topic=weblogs&group_id=ldtest1"
WITH JSON FORMAT
WITH PROPERTIES "./kafka-auth.properties"
LIMIT 5;

SELECT visitorId, adGroup, program, pageLabel, categoryId, referrerDomain
FROM "kafka://dev001:9093?topic=weblogs&group_id=ldtest1"
WITH AVRO './pixall-v5.avsc'
WITH PROPERTIES "./kafka-auth.properties"
LIMIT 5;

SELECT Symbol, Name, Sector, Industry, `Summary Quote`
INTO "./companylist.json"
FROM "companylist.csv"
WITH CSV FORMAT;

INSERT OVERWRITE "file://test2.json" (Symbol, Sector, Industry, LastSale)
SELECT Symbol, Sector, Industry, LastSale FROM "./companylist.csv"
WHERE Industry = "Precious Metals";

INSERT OVERWRITE "test2.json" (Symbol, Sector, Industry, LastSale)
SELECT Symbol, Sector, Industry, LastSale FROM "./companylist.csv"
WHERE Industry = "Precious Metals";

************************************************************************
*       GROUP BY testing
************************************************************************


SELECT Process, COUNT(*) as Total
INTO './report-info.csv'
FROM 'report-data.csv' group by Process;


SELECT Process, COUNT(*) as Total FROM 'report-data.csv' group by Process;

************************************************************************
*       JSON testing
************************************************************************

SELECT * FROM '1495582154423.json' WITH JSON PATH ('data') LIMIT 1;

SELECT `data.Id`, `data.CreatedById`, `data.city`, `data.state`, `data.AnnualRevenue`, `data.Type`, `data.SystemModstamp` FROM '1495582154423.json';

SELECT Id, CreatedById, city, state, AnnualRevenue, Type, SystemModstamp FROM '1495582154423.json' WITH JSON PATH ('data');

DESCRIBE (SELECT * FROM '1495582154423.json' WITH JSON PATH ('data') LIMIT 1);

DESCRIBE (SELECT * FROM '1495582154423.json' LIMIT 1);

DESCRIBE (SELECT * FROM '1495582940879.json' LIMIT 1);

************************************************************************
*       Union testing
************************************************************************

SELECT Symbol, Name, Sector, Industry, `Summary Quote`
FROM 'companylist.csv'
WHERE Industry = 'Oil/Gas Transmission'
UNION
SELECT Symbol, Name, Sector, Industry, `Summary Quote`
FROM 'companylist.csv'
WHERE Industry = 'Integrated oil Companies'
UNION
SELECT Symbol, Name, Sector, Industry, `Summary Quote`
FROM 'companylist.csv'
WHERE Industry = 'Integrated oil Companies';

************************************************************************
*       Functions
************************************************************************

CREATE FUNCTION getData(name String) AS RETURN @name;

CREATE FUNCTION getData(name String) AS
BEGIN
   RETURN @name
END;

SELECT getData('Hello World');

SHOW FUNCTIONS;

SELECT DATE_PARSE('2017-05-12', 'yyyy-MM-dd');
SELECT DATE_FORMAT(DATE_PARSE('2017-05-12', 'yyyy-MM-dd'), 'MM-dd-yyyy');

************************************************************************
*       Procedures
************************************************************************

CREATE PROCEDURE copyData AS
BEGIN
   SELECT Symbol, Name, Sector, Industry, LastSale, MarketCap
   FROM 'companylist.csv'
   WHERE Industry = 'Consumer Specialties'
END;

CREATE PROCEDURE copyData() AS
BEGIN
   SELECT Symbol, Name, Sector, Industry, LastSale, MarketCap
   FROM 'companylist.csv'
   WHERE Industry = 'Consumer Specialties'
END;

CREATE PROCEDURE copyData(OUT name String) AS
BEGIN
   SELECT @name
END;

CALL copyData('Hello World');

SHOW PROCEDURES;

************************************************************************
*       VIEW testing
************************************************************************

CREATE VIEW 'OilAndGas' AS
SELECT Symbol, Name, Sector, Industry, `Summary Quote`
FROM 'companylist.csv'
WHERE Industry = 'Oil/Gas Transmission';

